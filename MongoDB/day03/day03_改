修改操作
    mysql:updata table set ... where...

    mongo:db.collection.updateOne(query,update,upsert)
    功能：修改第一个符合条件的文档
    参数：query     筛选条件　用法同find query
        updata    要修改的数据项，需要配合修改操作符使用
        upsert   　bool类型，默认表示没有符合筛选条件的文档，则不做任何操作
                    如果设置为true，则没有筛选到文档就根据query和updata插入文档
    例如：将姓名为www的年龄修改为１８  
    db.class0.updateOne({name:'www'},{$set:{age:18}})
    例如：如果没有符合query条件的文档则插入新的文档
        db.class0.updateOne({name:'han'},{$set:{age:18}},{upsert:true})

    db.collection.updateOneMony(query,update,upsert)
    功能：修改所有符合条件的文档
    参数：同updateOne
    例如：把所有年龄小于１８的修改为２０
        db.class0.updateMany({age:{$lt:18}},{$set:{age:20}})

    db.collection.update(query,update,upsert,multi)
    功能：修改筛选到的文档
    参数：query  筛选条件
        update  修改内容
        upsert  如果为true则可插入新的文档
        multi   默认表示只修改第一条符合条件的文档
                设置为true表示修改多条
    例如：将所有人的年龄修改为１０
        db.class2.update({},{$set:{age:10}},false,true)
    db.collection.findOneAndUpdate(query,update)
    功能：查找一个文档并修改
    参数:query  筛选条件
        update  修改内容
    返回：返回修改之前的文档
    例如：查找姓名为ttt人，并修改年龄为１８
        db.class0.findOneAndUpdate({name:'ttt'},{$set:{age:18}})
    db.collection.findOneAndReplace(query,doc)
    功能：查找并替换一个文档
    参数:query  筛选条件
        update  替换的内容
    返回：返回原有文档
    例如：将姓名为yyy的文档修改掉
        db.class0.findOneAndReplace({name:'yyy'},{name:'yyq',age:17,sex:'m'})
    
修改器的使用
    $set:修改一个域的值，或者增加一个域
    例如：查找没有name这个域的值，使用set增加name这个域
        db.class0.updateOne({name:{$exists:false}},{$set:{name:'han'}})
    $unset:删除一个域
    例如：删除han的age这个域
    db.class0.updateOne({name:'han'},{$unset:{age:''}})

    $rename:修改一个域的域名
    例如：修改一个域的域名
        db.class0.updateMany({},{$rename:{sex:'gender'}})
    
    $setOnInsert:当upsert插入文档时，作为补充的插入内容
    例如：当插入新文档时，作为补充插入的内容
        db.class0.update({name:'han'},{$set:{age:18},$setOnInsert:{gender:'w'}},{update:true})
    
    $inc:加法修改器，如果值为-1，就是减
    例如：所有的年龄增加１
        db.class0.updateMany({},{$inc:{age:1}})
    $mul:乘法修改器
    例如：将han的年龄乘以２
        db.class0.updateOne({name:'han'},{$mul:{age:2}})
    
    $inc    $mul 操作数可以是整数、负数、小数

    $max:指定某个域的值，如果小于规定值则修改为规定值，大于规定值则不变
    例如：如果yyq的年龄小于１９,就修改为１９
    db.class0.updateOne({name:'yyq'},{$max:{age:19}})

    $min:指定某个域的值，如果大于规定值则修改为规定值，小于规定值则不变
    例如：如果yyq的年龄大于１８,就修改为１８
    db.class0.updateOne({name:'yyq'},{$min:{age:18}})

数组修改器
    $push:向数组中添加一项
    例如：将小亮的成绩表中添加一门成绩
        db.class2.updateOne({name:'小亮'},{$push:{score:86}})

    $pushAll:向数组中添加多项
    例如：向数组中添加两项
        db.class2.updateOne({name:'小红'},{$pushAll:{score:[5,10]}})

    $pull:从数组中删除某一个值
    例如：删除小红成绩里的值
        db.class2.updateOne({name:'小红'},{$pull:{score:5}})

    $pullAll:同时删除数组中多个值
    例如：删除小红成绩里的88、10
        db.class2.update({name:'小红'},{$pullAll:{score:[88,10]}})
    
    $pop:从数组中弹出一项
    例如：在小明的成绩表中弹出最后一项成绩（１表示最后一项，－１表示第一项）
        db.class2.update({name:'小明'},{$pop:{score:1}})

    $addToSet:向数组中添加一项，但不能添加已存在的内容
    例如：向数组中添加８１，如果存在则无法添加
        db.class2.update({name:'小明'},{$addToSet:{score:83}})
    $each:对多个值进行逐一操作
    例如：同时添加９０、10
        db.class2.update({name:'小红'},{$push:{score:{$each:[90,10]}}})
    
    $position:指定插入位置，配合each
    例如：向小红的成绩第一个后面插入５
        db.class2.update({name:'小红'},{$push:{score:{$each:[5],$position:1}}})

    $sort:对数组排序，搭配each使用
    例如：对小红成绩进行从小到大排序(1代表升序，-1代表降序　)
        db.class2.update({name:'小红'},{$push:{score:{$each:[],$sort:1}}})

时间类型
    获取当前时间： 
        １、new Date()  自动生成当前时间
        例子：
            db.class1.insertOne({book:'python入门',date:new Date()})
        ２、ISODate()自动获取当前时间
        例子：
            db.class1.insertOne({book:'python精通',date:ISODate()})
        ３、Date()获取系统当前时间
            db.class1.insertOne({book:'python放弃',date:Date()})
        ４、存储任意时间
            ISODate()
            功能：将指定的时间字符串转换为mongodb时间存储
            参数：指定时间
                '2019-01-01 12:12:12'
                '20190101 11:11:11'
                '20190101'
            db.class1.insertOne({book:'python之美',date:ISODate('2019-03-15 20:14:29')})
时间戳
    valueOf()
    功能：将ISO date装换为时间戳
    例子：
        db.class1.insertOne({book:'python涅槃',date:ISODate().valueOf()})
        *记录一个当前的时间点（距离1971年有多少秒）类似于：1548397858010
Null类型数据
    值：null
    １、表示某个域值为空
        例如：表示：price域值为空
            db.class1.insertOne({book:'python放生',price:null})
    ２、表示某个域不存在
        例如：查找price域为null或者不存在这个域的文档
            db.class1.find({price:null},{_id:0})
Object类型（内部文档）
    文档中某个域的值还是文档，则该值为Object、
        db.class3.insertOne({name:'鲁迅',book:{title:'狂人日记',price:48.5,publication:'中国工业出版社'}})
        db.class3.insertOne({name:'老舍',book:{title:'茶馆',price:46,publication:'中国教育出版社'}})
        db.class3.insertOne({name:'钱钟书',book:{title:'围城',price:47,publication:'中国教育出版社'}})
        db.class3.insertOne({name:'沈从文',book:{title:'边城',price:32,publication:'北方出版社'}})
    db.class3.find({'book.title':'狂人日记'},{_id:0})
    db.class3.find({'book.publication':'中国工业出版社'},{_id:0})
    *当使用内部文档的某个域时，需要外部文档域名，内部文档域名的方法引用，引用时加引号
    例子：通过book.title查找
        db.class3.find({'book.title':'狂人日记'},{_id:0})
    *修改边城价格为３５
    db.class3.update({'book.title':'边城'},{$set:{price:35}})

通过数组下标直接引用数组项
    *在使用数组时，可以直接通过数组域.数组下标操作数组的某一项
    例子：修改小明scoer中第二项为６７
        db.class2.update({name:'小明'},{$set:{'score.1':67}})
        db.class2.find({'score.0':{$gt:80}})
练习：
    基于之前的grade数据库
１、将小红的年龄修改为８岁，兴趣爱好变为跳舞画画
    db.class.update({name:'ddd'},{$set:{hobyy:['dance','draw']}})
２、追加小明兴趣爱好唱歌
    db.class.update({name:'fff'},{$push:{hobyy:"sing"}})
３、小王多了兴趣爱好吹牛、打篮球
    db.class.update({name:'eee'},{$pushAll:{hobyy:[ "football","吹牛"]}})
４、小李兴趣多了跑步唱歌，但是注意不要和已有的重复
    db.class.update({name:'ggg'},{$push:{hobyy:"running"}})
５、班级所有同学年龄加１
    db.class.updateMany({},{$inc:{age:1}})
６、删除小明sex属性
    db.class.updateOne({name:'hhh'},{$unset:{age:''}})
７、删除小李兴趣中的第一项
    db.class.updateOne({name:'iii'},{$pop:{hobyy:-1}})
８、删除小红兴趣中画画和唱歌
    db.class.update({name:'ddd'},{$pullAll:{hobyy:['sing','draw']}})
９、为小王增加一个域    备注：{名族:'回族',习俗:'不吃猪肉'}
    db.class.update({name:'ddd'},{$set:{备注:{名族:'回族',习俗:'不吃猪肉'}}})
１０、在小王备注中增加一项，宗教：'伊斯兰教'
    db.class.update({name:'ddd'},{$set:{备注:{宗教:'伊斯兰教'}})
    db.class.deleteOne({name:'ddd',备注{宗教:'伊斯兰教'}})
索引    
    什么是索引？
        索引是建立文档所在位置的查找清单，使用索引可以方便的进行快速查找，减少遍历次数，提高查找效率
    索引约束
        １、索引本身也占有数据库空间，所以当数据量很小时没有必要创建索引
        ２、索引需要根据数据及时修改，否则索引就不和内容配套，失去了意义。
            因为如果数据库操作时频繁的写操作，而不是查找操作就不适合创建索引
创建索引
    db.collection.createIndex()
    功能：创建索引
    参数：索引域（必写）　和　索引选项
    例子：为name域创建索引
        db.class0.createIndex({name:1})
    *_id域会自动生成索引，该索引不能删除
    *1表示正向索引，-1表示逆向索引
    *一个集合中不能创建重复的索引

    查看集合中的索引
        db.collection.getIndexes()
    定义索引名称
    例子：通过索引选项name定义索引名称
    db.class0.createIndex({age:1},{name:'ageIndex'})

    其他索引创建方法
        ensureIndex()
        功能：创建索引
        参数：同createIndex
        例如：创建索引（同createIndex）
            db.class0.ensureIndex({gender:1})
    createIndexes([{},{}...])
    功能：同时创建多个索引
    参数：数组中填写多个索引项即可
    例如：同时创建多个索引
        db.class0.createIndexes([{age:-1},{gender:-1}])
删除索引
    db.collection.dropIndex()
    功能：删除一个索引
    参数：索引名或键值对删除
    例如：通过索引名称删除
        db.class0.dropIndex('gender_-1')
    例如：通过键值对删除
        db.class0.dropIndex({age:-1})

    db.collection.dropIndexes()
    功能：删除所有索引（除了_id）
    例如：删除class集合中所有索引
        db.class0.dropIndexes()
索引类型
    复合索引：根据多个域创建一个索引
    例如：根据name和age两个域创建一个索引
        db.class0.createIndex({name:1,age:-1})
    子文档和数组索引：如果对某个域创建索引，该域的值为子文档或者数组，则对数组或者子文档中某一项进行查找也是索引查找
        db.class３.find({'book.title':'围城'},{_id:0})
    
    唯一索引：要求创建的索引的域不能有重复的值(防止插入重复的姓名)
    例如：对name创建唯一索引
        db.class0.createIndex({name:-1},{unique:true})

    稀疏索引：会在创建索引时忽略没有指定域的文档
    例如：对gender创建稀疏索引，如果有文档没有gender这个域，就会忽略它
        db.class0.createIndex({gender:1},{sparse:true})
聚合操作
    对文档数据进行整理筛选统计
    db.collection.aggregate()
    功能：完成聚合操作、
    参数：聚合条件，需要配合聚合操作符

    聚合操作符
    $group  分组聚合　往往需要配合一定的统计操作符完成
    统计求和：$sum
    例如：按照性别统计人数
        db.class0.aggregate({$group:{_id:'$gender',num:{$sum:1}}})
    例如：按照性别统计年龄（每存在一个就加上它的年龄）
    db.class0.aggregate({$group:{_id:'$gender',num:{$sum:'$age'}}})

作业：
    １、熟练使用修改操作符和索引操作
    ２、mysql修改练习使用mongo完成
    ３、查文档完成，$avg    $project