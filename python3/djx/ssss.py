# ASCII编码表
#   Linux 查看方式:
#     $ man ascii 

# python3中字符串默认存储的是UNICODE编码值
#   0x0000 ~   (从0 开始)

# in / not in 运算符
#   作用:
#     in 用于序列,字典,集合中,用于判断某个值是否存在于容器
#     中,如果存在则返回True,否则返回False
#     not in 写in 的返回结果相反
#   格式:
#     对象 in 序列

# 切片 slice
#   作用:
#     从字符串序列中取出相应的元素重新组成一个字符串序列 
#   语法:
#     s[(开始索引b):(结束索引e)(:(步长s))]
#     s = "ABCDE"
#     a = s[1:4]    # 'BCD'
#     a = s[1:]     # 'BCDE' 等同于 a = s[1:5]
#     a = s[:4]     # 'ABCD' 等同于 a = s[0:4]
#     a = s[:2]     # 'AB'
#     a = s[1:1]    # ''  空字符串
#     a = s[3:0]    # '' 空字符串
#     a = s[0:5:2]  # 'ACE'
#     a = s[::2]    # 'ACE
#     a = s[4:1:-2]  # 'EC'
#     a = s[:1:-2]  # 'EC'
#     a = s[::-2]   # 'ECA'
#     a = s[::-1]   # 'EDCBA'

# 字符串序列相关的函数:
#   len(x)  返回序列的长度
#   max(x)  返回序列中最大值元素
#   min(x)  返回序列的最小值元素
#   l.sort()给序列排序从小到大
# 字符串编码转换函数:
#   ord(c) 返回一个字符c的Unicode 编码值
#   chr(i)  返回i这个值对应的字符
# 整数转为字符串的函数
#   bin(i)   将整数转为二进制的字符串
#   oct(i)   将整数转为八进制的字符串
#   hex(i)   将整数转为十六进制的字符串

# S.count方法  统计个数



# 格式化字符串中的占位符和类型码
#   占位符和类型码     意义
#     %s           字符串,使用str(x) 函数转换
#     %r           字符串, 使用repr(x) 函数转换
#     %c           整数转为单个字符
#     %d           十进制整数
#     %o           八进制整数
#     %x           十六进制整数(字符a-f小写)
#     %X           十六进制整数(字符A-F大写)
#     %e           指数型浮点数 (e小写),如:2.9e+10
#     %E           指数型浮点数 (E大写),如:2.9E+10
#     %f,%F        浮点十进制形式
#     %g,%G        十进制形式浮点或指数浮点自动转换
# #     %%           等同于一个%字符

# 占位符和类型码之间的格式化语法:
#   % [- + 0 宽度.精度] 类型码
#   说明:
#     -    左对齐(默认为右对齐)
#     +    显示正号
#     0    左侧空白位置补零
#     宽度  整数,整个数据输出的宽度(占用的字符数)
#     精度  整数,保留小数占后多少位(默认为6位)
#   示例:
#     "%d" % 123        # '123'
#     "%10d" % 123      # '       123'
#     "%-10d" % 123     # '123       '
#     "%10s" % "ABC"    # '       ABC'
#     "%010d" % 123     # '0000000123'
#     "%+010d" % 123    # '+000000123'
#     pi = 3.1415926535897932
#     "%f" % pi         # '3.141593'
#     "%.10f" % pi      # '3.1415926536'
#     "%7.2f" % pi      # '   3.14'  

#   元组 tuple
#   字典 dict

# 元组
#   ()
#   "abcd",
#   ('',)
#   (100, 200, "hello")
#   tuple()
#   tuple("ABCD")
#   运算:
#     +  +=   *  *= 
#     <  <= > >= == != 
#     in / not in 
#     索引/切片
#   序列:
#     字符串 str
#     列表 list
#     元组 tuple

# 字典 dict
#   可变的容器
#   键-值对
#   索引方式为键索引

#   创建方式:
#     {}
#     {1:"One"}
#     {1:"One", 2:"Two"}
#     dict()
#     dict(可迭代对象)
#   字典的方法:
#     D.clear()
#     D.pop(key)   删除一个键,同时返回键所对应的值
#     D.copy()  浅拷贝
#     D.update(D2)
#     D.get(key,default=None)  # D[key]
#     D.keys()  
#     D.values()  
#     D.items()  

# 字典的键索引：
# 　　用[] 运算符可以获取字典内的“键”对应的值
# 　语法：
# 　　　　v=字典值[键]

#   字典推导式
#     {键表达式: 值表达式 for 变量 in 可迭代对象 if 真值表达式}

# 列表是顺序存储
# 字典是散列存储

# 创建空集合
#   set()
# 创建非空集合的字面值:
#   s = {1, 2, 3}
#   s = {"hello", "china"}
# 集合的构造(创建)函数 set
#   set()  创建一个空的集合对象(不能用{} 来创建空集合)
#   set(iterable)  用可迭代对象创建一个新的集合对象
# 集合的运算:
#   交集&, 并集|, 补集-, 对象补集^, 子集<   超集>
# 用于集合的函数:
#   len(x), max(x), min(x), sum(x), any(x), all(x)
#   示例:
#     s = set(range(10))  # {0, 1, 2, 3, 4...., 9}
#     s = set("ABCD")
#     s = set("ABCCBA")  #  s ={'A', 'B', 'C'}
#     s = set({1:'One', 5:'five'})  # {1, 5}
#     s = set([1, 0, 3.14, 0.618])
#     s = {True, None, "ABC", (1, 2, 3)}

# 固定集合  frozenset
#   固定集合是不可变的,无序的,含有唯一元素的集合
#   作用:
#     固定集合可以作为字典的键,也可以作为集合的值

# 固定集合的构造函数 frozenset
#   frozenset()  创建一个空的固定集合
#   frozenset(iterable)  用可迭代对象创建一个新的固定集合
#   示例:
#     fz = frozenset("hello")  # frozenset({'l', 'o', 'e', 'h'})

#   实参(实际参数传递)
#     位置传参
#       序列传参  *序列
#     关键字传参   fn(a=10, b=20)
#       字典关键字传参 fn(**{'a':10, 'b':20})
#   形参(接收实参)
#     定义方式:
#       位置形参
#    星号元组形参：def fn(*args)
#       语法:
#         def 函数名(*元组形参名):
#             语句块
#       作用:
#         收集多余的位置传参
#       说明:
#          在一个函数名的形参列表内只能有一个星号元组形参
#         元组形参名一般命名为 'args'   
#       命名关键字形参  def fn(*,a,b,c) def fn(*args,a,b,c)
#       **字典形参  def fn(**kwargs):

#     缺省参数
#       1. 缺省参数必须自右至左依次存在,如果一个参数有缺省参数,则
#       其右侧的所有参数都必须有缺省参数
#       2. 缺省参数可以有0个,1个或多个,甚至全部都有缺省参数
#       在实参传递时,当不传入实参时,默认使用缺省参数
#          def fn(a=10, b=20, c=30, *args, d=40, e=50):

# 全局变量和局部变量
# 局部变量
#    赋值语句可以创建局部变量
#    def 语句可以创建变量(在函数内,将创建局部变量)
#    for x in range(10):  创建变量

# 全局变量 global 和局部变量 local
#   globals()  返回当前全局作用域内变量的字典
#   locals()  返回当前部作用域内变量的字典
