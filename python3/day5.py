# 列表的索引：
# 　　index 
# 语法：
# 　　列表[整数表达式]
# 用法：
# 　　等同于字符串的索引
# 　　索引分为正向索引和反向索引，规则与字符串的规则完全相同
# 示例：
# l=[1,2,3,4,5]
# print(l[1])  #2        l(1)索引值为１，就是“２”
# print(l(-1)) #5
# print(list([1]))
# 列表的索引赋值操作
# 　　列表是可变的序列，可以通过索引赋值改变列表中的元素
# 语法：
# 　　列表[整数表达式]=表达式
# 示例：
# 　　l=[1,-2,3,-4,5]
#     l[1]=2
#     print(l)  #[1,2,3,-4,5]
#     l(-2)=4
#     print(l) #[1,2,3,4,5]

# 列表的切边：
# 　　列表[:]
# 　　列表[::]
#    列表的切片是从列表中取出相应的元素，重新组成一个新的列表
#    列表的切片规则等同于字符串的切片规则
#    示例：
#    　　l=[0,1,2,3,4,5,6,7,8]
#        l2=[1:9:2]  #l2=[1,3,5,7]

# 列表的切片赋值
# 　　作用：
# 　　　　　可以改变原列表的排序，可以插入，删除和修改数据
# 　　语法：
# 　　　　　列表[切片ｓｌｉｃｅ]＝可迭代对象
# 　　说明：
# 　　　　　赋值运算符的右则必须是可迭代对象
# 　　示例：
# 　　　　l=[2,3.1,4.2,5]
#        l[1:3]=[3,4] #l=[2,3,4,5]     替换掉3.1  4.2  的值
# c=[2,3,4,5]#插入到最后面
# c[4:4]=[6]   #c=2,3,4,5,6
# print(c)
# l=[2,3]      
# l[0:0]="ab"   
# print(l)

# d=[1,2,3]
# d2=d
# d[::]=[]    #清空列表，不是创建新的空列表
# print(d2)

# 练习：　　
# 　　　已知有列表：　l=[3,5]
#     用索引和切片的操作，讲原列表改为：
#     　　l=[1,2,3,4,5,6]
#     讲列表反转，删除最后一个元素后再打印此列表
#     print(l)  #[6,5,4,3,2]
#     (尽可能让l绑定的ｉｄ不变)
# l=[3,5]
# print(id(l))
# l[0:0]=[1,2]
# l[3:3]=[4]
# l[5:5]=[6]
# print(l[-1:-6:-1])
# print(id(l))

# del 用于删除列表中的元素
# 　语法：
# 　　　　　del  列表[索引]
# 　　　　　del  列表[索引]
# 　示例：
# 　　　l=[1,3.14,2,100,3]
#      del l[1]
#      del l[2]
#      print(l)
#   说明：
#   　　　列表中的元素被删除后，后续元素的索引值会变小，即后续元素前移。

# 列表的切片操作的注意事项
# 　　对于步长不等于１的切片赋值，赋值运算符右侧的可迭代对象提供的元素个数，一定要等于切片切出的段数
# 　如：
# 　　　l=[1,2,3,4,5,6]
#      l[::2]="ABC"
#      l[::2]="ABCDE"

# python3 中常用的序列函数
# len(sep)  返回序列的长度
# max(x)  返回序列的最大值元素（要求每两个元素都能比较大小）
# min(x)　　返回序列的最小值元素
# sum(x)　　返回序列中的所有元素的和（元素必须是数值类型）
# any(x)   真值测试，如果列表中其中一个值为真值，则返回true
# all(x)   真值测试，如果列表中所有值都为真值才返回true,否则返回ｆａｌｓｅ
# 示例：
# l=[1,3.14,0,999999,10]
# len(l)  #5
# max(l)   #999999
# min(l)  #0
# sum(l)   #100000013.14
# any(l)  #true
# all(l)  #false

# 序列相关的函数
# reversed(seq)  返回原序列的反向顺序的可迭代对象
# sorted(iterable,reverse=False)  返回可迭代对象中排序后的对象的列表
# 示例：
# 　　l=[5,9,7,1,3]
#    for x in reversed(l):
#        print(x)  #31795# 原来顺序的反向
#     l2=sorted(l)  #l2=[1,3,5,7,9]
#     l3=sorted(l,reverse=False)  #l3=[9,7,5,3,1]
# 输入一些正整数，存入一个列表Ｌ中，当输入－１时结束输入
# 　１、打印出列表中存有的数字
# 　２、打印出你输入的数字最大数
# 　３、打印你输入的这些数的平均数
# sum=0
# l=[]
# while True:
#     a=int(input("输入整数："))
#     l+=[a]
#     print(l)
#     if a<0:
#         break
# print("最大值:",max(l))
# print("平均值：",sum(l)/len(l))

# python3 中常用的列表方法（method）
# 详见：>>>help(list)
# 练习：
# 　　写一个程序让用户输入两个以上的正整数，当用户输入负数时结束输入
# 　　（要求：限制用户，不允许输入重复的数）
# 　１、打印这些数的和
# 　２、打印这些数中最大的一个数
# 　３、打印这些数中第二大的数
# 　４、删除最小的一个数
#  思考：　如何保证原数据顺序不变，最后按原来的顺序打印出剩余的数？
# l=[]
# sum=0
# while True:
#     a=int(input("输入整数"))
#     if(a<0):#此处再次进行判断，查看已获取的整数
#         if len(l)>2:
#             break
#         else:
#             print("你输入的数字太少，请继续输入")
#             continue
#     if a in l :
#         print("你已经输入过这个数了，请重新输入！")
#     else:
#         l.append(a)
#     l+=[a]
#     sum+=a
#     print(l)
#     print("和是：",sum)
#     print("最大的数是：",max(l)) 
#     print(a)
#     print("第二大的数是：",)

# 深拷贝　和　浅拷贝
# １、不拷贝
# 　　　l1=[1,2,[3.1,3.2]]
#      l2=l1  #不拷贝，两个变量绑在一个对象上
#      l2[1]=2.2
#      l2[2][0]=3.14
#      print(l1)   #[1,2.2,[3.14,3.2]]
#      print(l2)    #[1,2.2,[3.14,3.2]]
# 2、浅拷贝　shallow copy
#    浅拷贝是指在复制过程中，只复制一层变量，不会复制深层变量绑定的对象的复制过程
#    示例：
# l1=[1,2,[3.1,3.2]]
# l2=l1.copy() #浅拷贝　
# l2[1]=2.2
# l2[2][0]=3.14
# print(l1)#[1,2.2,[3.14,3.2]]
# print(l2)#[1,2,[3.1４,3.2]]
# 　３、深拷贝　　deep copy
#   深拷贝是指在复制过程中，复制所有变量以及变量相关联的深层变量绑定的对象，实现两个对象完全独立
#   示例：
# import copy  #导入复制模块
# l1=[1,2,[3.1,3.2]]
# l2=copy.deepcopy(l1) #深拷贝
# l2[1]=2.2
# l2[2][0]=3.14
# print(l1)#[1,2.2,[3.14,3.2]]
# print(l2)#[1,2,[3.1４,3.2]]

# 列表和字符串比较
# 　　列表与字符串都是序列，元素与元素之间有顺序关系
# 　　字符串是不可以改变的序列，列表是可以改变的序列
# 　　字符串只能存储字符，而列表可以存储任何类型的对象
# 　　列表和字符串都是可迭代对象
# 　不可变数据类型：
# 　　　占用内存相对较小，数据安全，但不能实现添加、删除等操作可变数据类型
# 　可变数据类型
# 　　　占用内存较多，可以实现灵活的添加、删除、修改等操作

# 字符串　文本解析的方法split,splitlines 和 join
# s.split(sep=none) 将字符串用ｓｅｐ作用分隔符分割ｓ字符串，返回分割之后的字符串列表
# 　　　　　当不给定参数时，用空白字符作为分隔符
# s.splitlines(sep=none) 将字符串以行为单位进行分割，形成分割后的列表,默认用换行符作为分隔符
# s.join(iterable) 用可迭代对象中的字符串，返回一个中间用ｓ进行分割的字符串
#       a=list('hello')
#       s=''.join(a)
# 示例：
# 　　s='bejing is capital'
#    l=s.split('') #l=['beijing','is','capital']
#    s='a b c d\nABCD\n1 2 3 4\n'
#    l=s.splitlines()

# a=list('hello')  #创建列表
# s=''.join(a)   #把字符串之间的分割用空字符串去掉
# s1='-'.join(a)
# print(a)
# 方法二
# s=''.join('hello')
# s1='-'.join('hello')
# print(s1)

# 列表推导式　list comprehension
#    列表推导式是用可迭代对象来创建列表的表达式
#    作用：
#    　　用简易方法创建列表
#    语法：
#    　　[表达式　ｆｏｒ　变量　ｉｎ　可迭代对象]
#    　或
#    　　[表达式　ｆｏｒ　变量　ｉｎ　可迭代对象　ｉｆ　真值表达式]
#    示例：
#    　　生成一个数值为１－９的整数的平方的列表 即：l=[1,4,9,16,25,...81]
# 　　　　　　方法１
#    　   l=[x**2 for x in range(1,10)]
#        print(l)
# 　　　　　方法二
# 　　　　　　l=[]
#    for x in range(1,10):
#        if x%2=1:
#            l.append(x**2)
#     print(l)
# 生成１－１００中的奇数
# l=[x for x in range(1,100,2)]
# print(l)

# 列表推导式２
# 　　生成一个数值１－９的奇数平方的列表

# 列表推导式的嵌套：
# 　　[表达式１　ｆｏｒ　变量１　ｉｎ　可迭代对象１　ｉｆ　真值表达式１]
# 　　　　　　ｆｏｒ　变量２　ｉｎ　可迭代对象２　ｉｆ　真值表达式２
# 示例：
# l=[x+y for x in [10,20,30]for y in [1,2,3]]
# print(l)  
# 练习：　
# 　　　用字符串“ＡＢＣ”和字符串“１２３”生成以下列表：
# 　　　['A1','A2','A3','B1','B2','B3','C1','C2','C3']
# l=[x+y for x in 'abc' for y in '123']
# print(l)

# 练习：
# 　１、　输入一个整数，用ｂｅｇｉｎ绑定
# 　　　输入一个结束的整数，用ｅｎｄ绑定
# 　　　将从ｂｅｇｉｎ开始，到ｅｎｄ结束（不包含ｅｎｄ）的偶数存于列表中
# 　　　并打印此列表（建议用列表推导式实现）
# l=[]
# begin=int(input("输入一个整数："))
# end=int(input("输入一个整数："))
# for x in range(begin,end):
#     if x%2==0:
#         l+=[x]
# print(l)


# ２、已知有字符串：
# 　　　s='100,200,300,500,800'
#      将其转化为列表，列表的内部为数字：
#      l=[100,200,300,500,800]
# s='100,200,300,500,800'
# l
# for x in l:
# #     c="%d" % c
# #     d+=[c]
# # ts=float(l)
#     l2.append(x)
# # print("%d" % d,end=" ")

# 3、已知有一个列表中存有很多数，还有重复的，如：
# 　　　l=[1,3,2,1,6,4,2,....98,82]
#    1)将列表中出现数字存入一个列表l2中
#    　　要求：重复出现多次的数字只能在l2中保留一份（去重）
#    ２)将列表中出现两次的数字存入另一个列表l３中，在l3中只保留一份
# l=[1,2,3,4,5,1,2,3]
# l2=[]
# l3=[]
# for x in l:
#     if x in l2:
#         l3.append(x)
#         continue
#     else:
#         l2.append(x)
# print(l2)
# print(l3)

# ４、写程序，生成前４０个斐波那契数
# 　　　１　１　２　３　５　８　１３．。。。。
# 　　将这些数存于一个列表中，并打印出来
# L.index(v [, begin[, end]])
a=[1,1]

print(a)
    