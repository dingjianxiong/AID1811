# 一、fork()创建子进程特点（网络编程）
#     １、子进程会复制父进程全部的内存空间和代码段
#     ２、子进程会从fork的下一句开始执行
#     ３、if..elif...else结构正是根据父子进程fork的返回值不同进程执行不同的内容，
#         几乎是fork的固定搭配
#     ４、父子进程运行互不影响，使用同一个终端，运行顺序不定
#     ５、子进程有自己特有的PID,PCB，命令集等
#     ６、进入阻塞状态的进程一定会让出cpu时间片
#     ７、子进程连同fork之前开辟的空间也会复制，但是父子进程各自空间独立，操作各自空间，
#         互不影响
# 二、进程相关的函数使用
#     os.getpid()
#     功能：获取当前进程的pid号
#     返回值：返回pid号

#     os.getppid()
#     功能：获取父进程的pid号
#     返回值：返回父进程的pid号

#     os._exit(status)
#     功能：退出一个进程，用于在线程中退出，
#     参数：表示进程退出状态（整数）
#           

#     sys.exit([status])
#     功能：退出一个进程，用于在主线程中退出。
#     参数：默认为０  整数表示进程退出状态
#          字符串　  则在进程退出时打印该字符串

# os._exit(), 直接退出 Python 解释器, 不抛异常, 不执行相关清理工作，其后的代码都不执行，
# os._exit() 用于在线程中退出，
# sys.exit() 用于在主线程中退出。
# 三、孤儿进程和僵尸进程
#     孤儿进程：父进程先于子进程退出，此时子进程成为孤儿进程（没有父进程的进程）
#         *孤儿进程会被系统进程收养，此时系统进程就会成为该进程新的父进程

#     僵尸进程：因为，子进程先于父进程退出，父进程没有处理子进程的退出状态，此时
#         子进程就会成为僵尸进程
#         *僵尸进程虽然会结束，但会存留部分PCB在内存，大量僵尸进程会占用内存资源
#     如何处理僵尸进程
#         １、在父进程中使用函数处理子进程退出状态
#             pid,status=os.wait()
#             功能：阻塞处理子进程退出
#             返回值：pid 退出的子进程的pid
#                 status 子进程的退出状态

#             pid,status=os.waitpid(pid,option)
#             功能：阻塞等待处理子进程退出
#             参数：pid    -1  表示等待任意子进程退出
#                         >0　等待指定pid的子进程退出
#                  option  0   表示阻塞等待
#                         WNOHANG 表示非阻塞
#             返回值：pid 退出子进程的pid
#                    status 子进程的退出状态
#         ２、创建二级子进程
#             [1] 父进程创建子进程，等待子进程退出
#             [2] 子进程创建二级子进程后立即退出
#             [3]　将事件交由父进程和二级子进程完成
#                 一级子进程被回收，二级子进程成为孤儿，都保护会变成僵尸

# 群聊聊天室
# 功能：类似ｑｑ微信群聊
# １、进群需要输入姓名，姓名不能重复
# ２、进入聊天室，会向其他人发送通知
#     ｘｘｘ进入了聊天室
# ３、某人发消息，群里其他人能够收到
#     ｘｘｘ说：
# ４、某人退出聊天室也会向其他人发起通知
#     ｘｘｘ退出聊天
# ５、管理员可以发送管理员消息，此时群里所有人能够收到
#     管理员ｘｘ说：

# １、确定技术模型
#     消息的发送(转发)：　先发送给服务端，然后转发给其他人
#     套接字：udp套接字（或tcp套接字）
#     存储用户：字典（或列表）
#     消息收发随意：使用多个进程分别处理消息收发
# ２、注意事项
#     封装：将每个功能封装为函数（或者类）
#     测试：实现一个功能测试一个功能，测试一个功能
#     流程：搭建网络连接，逐个功能实现
# ３、具体功能：
#     １、网络通信
#         服务端：
#             创建udp套接字，绑定地址，创建多进程

#         客户端：创建udp套接字，创建多进程
#     ２、用户登录
#             客户端： 输入用户名发送给服务端
#                     接收服务器反馈
#                     不允许登录则重新输入，允许则进入聊天
#                     创建新的进程，用于消息收发
#             服务端：　接收用户名
#                     判断姓名是否存在
#                     根据判断结果回复客户端
#                     不允许登录则功能结束
#                     允许登录将用户加入数据结构
#                     将用户登录提示发送给其他人
#     ３、聊天
#         服务端：接收消息
#                 将消息发送给其他人
#         客户端：输入消息
#                 将消息发送给服务端
#     ４、用户退出
#         服务端：收到＃＃表示客户端退出
#                 将用户从user移除
#                 告知其他人ｘｘｘ退出，给该用户发送退出指令
#         客户端：输入＃＃表示退出
#                 将退出信息发送给服务器
#                 发送进程退出
#                 接收到服务器指令退出
#     ５、管理员消息：

#项目思路
# 确定需求-->基本的技术分析-->整体设计-->功能分析-->代码实现-->代码测试完善

# 作业：
#     １、梳理聊天室代码思路
#     ２、整理fork创建进程内容
#     ３、用fork创建父子进程，同时复制一个文件，各复制一半
#     复制，获取文件大小，getsize()

