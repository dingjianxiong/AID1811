poll

p=select.poll()
功能：生成poll对象
返回值：poll对象

p.register(fd,ecent)
功能：注册要监控的IO事件
参数：fd 要监控的对象
    event要关注的事件类别
        常用的：POLLIN 读IO事件　 rlist
              POLLOUT 写IO事件　 wlist
              POLLERR 出错IO事件   xlist
              POLLHUP 断开连接事件
            p.register(s,POLLIN | POLLERR)
P.unrgister(fd)
功能：取消对IO的监控
参数：IO对象或文件描述符（获取文件描述符：f.fileno()）

events=p.poll()
功能：监控所有注册的IO
返回值：events 是一个列表。返回所有就绪的IO
    格式：
    [(fileno,event),(fileno,evevt),......]
    每个IO就绪都会在系列表中形成一个元组
    第一项为IO的fileno,第二项为就绪事件
*　需要配合查找字典通过fileon获取事件对象处理IO
    {s.fileno():s}确保字典包含所有注册IO
１、创建套接字
２、注册套接字为关注IO
３、创建查找字典，并维护
４、循环监控IO发生
５、处理IO发生的事件

epoll方法
使用方法：基本与poll方法相同
    *将生成对象的poll改为epoll
    *将所有事件改为epoll类型事件
epoll特点：
    *epoll的效率比select和poll要高
    *epoll可以监控的IO比select poll要多
    *epoll的触发方式要多　　
        EPOLLET（边缘触发）而默认三种方法都是水平触发（实际上select poll只有水平触发）

        水平触发：当IO事件发生时会一直提醒用户处理，直到处理完毕
        边缘触发：当IO事件发生时提醒用户处理，如果没有处理则不会持续提醒。而是在下一次再有
                IO事件就绪时再一同请求用户处理
struct 模块
功能：将一组数据进行结构化打包发送
原理：将数据转换为bytes格式发送，接收到的bytes格式数据也可以按照一定的数据类型解析

struct(fmt)
功能：生成struct对象
参数：fmt　定制的数据结构组成
        要发送的数据，1 zhang 1.75
        fmt　数据结构：struct('i5sf')
                            i:表示int
                            5s:表示５个字符串
                            f:表示５个浮点类型
            python 类型　　fmt
                int     i
                float   f
                bytes   ns(n表示n个字符)
st.pack(v1,v2,v3.....)   (与定制的数据结构相同)
功能：将一组数据按指定格式打包
参数：要打包的数据
返回值：返回打包后的bytes字串
    格式：
        st.pack(1,b'zhang',1.75)

st.unpack(bytes_data)
功能：将一个bytes字串解包
参数：要解析的bytes
返回值：解析后的内容

* 可以使用struct模块直接调用pack　unpack函数
struct.pack(fmt,v1.v2,v3...))
struct.unpack(fmt,bytes_data)
    struct.pack('i5sf',1,b'zhang',1.75)
    struct.unpack('i5sf',data)

本地套接字（流式套接字）
功能：本机两个程序之间进行数据传输
创建流程
    １、创建本地套接字
        sockfd=socket(AF_UNIX,SOCK_STREAM)
    ２、绑定本地套接字文件
        sockfd.bind(file)
    ３、监听
        listen()
    ４、消息收发
        recv() send()
linux 系统中文件：b(块设备)  c(字符设备)  d(目录) 　-(普通文件)
                l(链接)  s(套接字文件)  p(管道文件)

os.remove(file)
功能：删除一个文件

os.path.exixts(file)
功能：判断一个文件是否存在

多任务编程
意义：充分利用计算机资源提高程序的运行效率
定义：通过一定的编程方法，以程序运行中可以同时开启多个任务，
    通过计算机多核同时执行，以此提高运行效率
实现方案：多进程　　多线程
并发：同时处理多个任务，内核在任务间不断切换，达到好像多个任务被同时执行的效果，
        实际每个时刻只有一个任务占有内核
并行：多个任务利用计算机多核资源在同时执行，此时多个任务间为并行关系

进程（process）
    定义：程序在计算机中的一次执行过程
    程序：是一个可执行文件，是静态的占有磁盘空间
    进程：是一个动态过程，占有计算机资源，有一定生命周期
进程的产生：
    １、用户空间通过调用接口，或启动程序发起进程创建请求
    ２、操作系统接受用户请求，开始创建进程
    ３、操作系统分配计算机资源，确定进程状态，开辟空间等
    ４、操作系统将创建的进程提供给用户使用

进程相关概念
    cpu时间片：如果一个进程占有cpu内核，则这个进程在时间片上
    PCB（进程控制块）：在内存中开辟一块空间存放进程的基本信息
    进程ID（PID）：系统为进程分配的ID号，每个进程ID不重复，是大于０的整数
            查看命令：ps -aux
    父子继承：系统中每一个进程都有唯一的父进程，可以有０个或多个子进行，形成一个
            完整的树形关系
            查看命令：pstree
进程状态
    三态：
        就绪态：进程具备执行条件，等待系统分配资源
        运行态：进程占有cpu时间片，正在运行
        等待态（阻塞态）:进程暂停阻塞不具备执行条件
    五态（增加新建态、终止态）：
        新建态：创建一个新的进程，获取资源的过程
        终止态：进程结束，释放资源的过程
    ps -aux 中 STAT列
        S:等待态（阻塞态）
        R:运行态(就绪态)
        Z:僵尸

        < :有较高的优先级
        N :有较低的优先级
        + :前台进程
        s :进程组组长
        1 :有多线程
进程特征：
    １、进程可以使用计算机的多核资源
    ２、进程是计算机分配资源的最小单位
    ３、进程之间运行互不影响，各自独立
    ４、每个进程空间独立，各自占有资源，互不干扰
要求：
    １、什么是进程，和程序有什么区别
    ２、进程的特征有哪些
    ３、进程状态有哪些，互相之间如何转换
多进程编程：
    import os
    pid=os.fork()
    功能：创建新的进程
    返回值：失败　　返回一个负数
            成功　在原进程中返回新进程的PID号
                    在新进程中返回０

作业：把要求的问题自己描述总结
    网络编程　程序过一遍
    ｔｃｐ图解
    ｈｔｔｐ图解
    核心编程第３版
    掘金