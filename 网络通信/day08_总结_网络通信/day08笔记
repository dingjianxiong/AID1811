进程的优缺点：
    优点：
        １、可以利用计算机多核资源，进行并发处理
        ２、空间独立，数据安全性好
        ３、有专门的进程间通信方法，通信方便
    缺点：
        １、进程创建删除过程，消耗资源较多
        ２、大量的进程需要的计算机资源比较多
线程的优缺点：
    优点：
        １、创建简单，创建删除过程消耗资源较少
        ２、使用全局变量，通信方便
        ３、也能利用计算机多核进行并发操作
    缺点：
        １、通信过程中往往需要同步互斥机制，逻辑复杂
        ２、空间不独立，数据容易被修改
        ３、python线程有GIL问题
进程线程的联系：
    １、两者都是多任务编程方式，都能够利用计算机多核
    ２、一个进程可以包含多个线程分支
    ３、多个进程共享进程资源
    ４、进程线程在系统中都有自己的特有的属性，如：ID等
使用场景：
    * 如果某个任务并发比较多，此时多线程消耗资源较少，优先多线程
    * 不同的独立的模块使用多进程比较好管理
    * 在通信和数据处理上考虑可行性，如果同步互斥操作比较复杂，此时多线程可能容易出错
要求：
    １、进程线程的区别练习
    ２、进程间通信都知道哪些？，有什么特点
    ３、什么是同步互斥，你在什么情况下使用
    ４、给一个情形，分析使用进程还是线程，为什么
    ５、问一些概念，僵尸进程处理，进程状态转换，python线程效率


网络通信模型
    １、什么是服务器？
        硬件服务器：主机（IBM 惠普 联想）　集群
        软件服务器：编写的服务端应用程序，在硬件服务器系统上运行，
                    提供一定的完整的后端服务

        前端  用户端  客户端  前台
            特征：与用户直接交互，提供给用户使用
            要求：有良好的用户体验
        后端　服务端  后台
            特征：提供逻辑处理，数据处理，满足前端请求
            要求：更高的并发量，更快的处理速度，更强的安全性
    ２、软件服务器分类：
        按照功能：httpserver-->处理http请求
                webserver-->提供网站后端服务
                邮箱服务器-->提供邮件处理
                ftp服务器-->提供文件的上传下载服务
        按照结构：c/s 架构　　　客户端服务器模型
                b/s 架构　　　浏览器服务器模型
    ３、服务器的网络通信模型
        １、循环服务器模型：循环接收客户端请求，处理请求同一时刻只能处理一个请求，
                        处理完毕再处理下一个
            优点：实现简单，占用资源较少
            缺点：无法同时处理多个客户端请求
            适用情况：处理的任务可以很快完成，不会长期占有服务器，且访问量较小
                    udp比tcp跟适合循环模型（udp不需要连接）
        ２、并发服务器模型：能够同时处理多个客户端请求
            io并发：io多路复用　　　协程
                优点：资源消耗少，能够同时处理多个io
                缺点：只能监控io事件，无法处理cpu运算
            适用情况：后端对io的并发处理
        ３、多进程/多线程并发：为每个客户端单独创建进程/线程
            优点：每个客户端都可以长期占有服务器
            缺点：消耗的资源较高

多进程并发：
    基于fork完成多进程网络并发
    １、创建套接字，绑定，监听
    ２、等待客户端连接请求，accept
    ３、当有新的客户端连接，创建子进程，处理客户端请求
    ４、原有进程继续等待其他客户端连接
    ５、如果有客户端退出，销毁对应的进程
ftp文件服务器
    功能：
        １、服务端和客户端两部分，要求可以同时多个客户端访问服务器
        ２、客户端可以查看服务器文件库有什么文件（只提供普通文件）
        ３、客户端可以选择文件库中的文件下载到本地
        ４、客户端可以将本地文件上传到服务器文件库
        ５、在客户端使用print打印一定的格式界面，作为命令输入提示
    实现方案：
        １、fork并发模型
        ２、tcp套接字
        ３、获取目录下列表　　os.listdir(('.')):获取当前文件下的文件列表
                    过滤普通文件　os.path.isfile('.')
    代码结构：
        １、使用类将ftp功能封装（２，３，４）
    工作步骤：
        １、搭建网络连接
        ２、设计类的结构
        ３、逐个功能实现并测试（每个功能设置服务端和客户端步骤）
    具体功能：
        １、查看文件列表
            服务端：
                　　接收请求，判断请求类型
                　　判断可否执行请求，反馈结果
            客户端：
                   发送请求
                   接收服务器确认结果
                   循环接收服务器发来的文件名
        ２、退出
            服务端：
                接收退出请求
                结束相应的子进程

            客户端：
                发送退出消息
                结束进程
        ３、下载文件
            服务端：接收请求，解析出文件名
                　　判断文件是否存在，反馈结果
                　　发送文件
            客户端：发送请求，　G filename
                   接收服务端确认信息
                   接收信息
        ４、上传文件
            服务端：接收请求，解析出文件名
                    判断文件名是否冲突
                    接收文件
            客户端：发送请求，　s filename
                    接收服务端确认信息
                    发送文件
作业：
    １、完成ftp文件服务程序
    ２、复习http协议和httpserver第一版
    ３、尝试完成多线程并发程序