tcp 套接字传输特征：
　　１、当一段退出时，另一端如果阻塞在recv，此时recv会立即结束阻塞返回空字符串
　　２、如果另一端退出，此时再试图调用send向其发送时会出现BrokenPipeError异常
　　３、一个监听套接字可以同时连接多个客户端套接字
网络收发缓冲区
    *send和recv实际时向缓冲区发送和接受内容
    *只要缓冲区有内容recv就会接受，直到接受缓冲区为空
    *协调网络消息收发速度
tcp粘包
    产生原因：
        １、多次发送的消息，被一次接受
        ２、tcp消息以字节流方式传输，没有消息边界
        影响：如果每次发送的内容是一个独立含义的个体，粘包会产生一定影响
        如何处理粘包：
            １、消息结尾添加边界
            ２、发送消息采取延迟策略（不提倡）
            ３、将消息结构化处理

基于UDP套接字的网络编程
服务端
    １、创建数据报套接字
        sockfd=socet(AF_INET,SOCK_DGRAM)
    ２、绑定地址
        sockfd.bind(addr)
    ３、收发消息
        data,addr=sockfd.recvfrom(buffersize)
        功能：接受数据消息
        参数：一次最多接受消息的大小（字节）
        返回值：  data接受到的内容
                addr 消息发送者的地址
        n=sockfd.sendto(data,addr)
        功能：发送数据报消息
        参数：data要发送的消息　bytes
            addr 要发送消息的目标地址
        返回：发送的字节数
    ４、关闭套接字
        sockfd.close()
客户端
    １、创建数据报套接字
    ２、收发消息
    ３、关闭套接字

sys.argv:接受命令行参数
*将命令行参数以字符串形式收集为一个列表

tcp和udp套接字编程的差异
    １、流式套接字是以字节流的方式传输数据，数据报套接字则以数据报方式传输
    ２、tcp套接字会有粘包，但是udp套接字有消息边界不会粘包
    ３、tcp套接字保证传输的可靠性，udp套接字无法保证
    ４、tcp套接字是以listen　accpet进行连接，udp则不需要
    ５、tcp套接字使用recv，send收发消息，udp则用recvfrom，sendto
补充函数
    sendall(data)
    功能参数同send
    返回值：发送成功返回none，失败产生异常

socket常用的属性方法
    sockfd.type套接字类型
    sockfd.family套接字地址类型
    sockfd.getsockname()获取套接字绑定地址
    sockfd.fileno()获取套接字的文件描述符（fd：表示文件的描述符）
	文件描述符：系统中每一个IO操作都会被分配一个整数的文件描述符，用于系统区分不同的IO操作
    　　　　　　文件描述符具有唯一性（IO：文件的读写）
        sys.stdin.fileno():标准输入
        sys.stdout.fileno():标准输出
    sockfd.getpeername()获取连接套接字客户端地址
    　　　　telnet ip地址 端口　　　连接服务端（只用于tcp）

    sockfd.setsockopt(level,option,value)
    功能：设置套接字选择功能
    参数：level　选项级别　　　　SOL_SOCKET
        option 每个选项类别对应的子选项  
        value 对选项设置值　　　SO_REUSEADDR:重用端口号
        * 设置最好紧跟在套接字创建之后

    sockfd.getsockopt(level,option)
    功能：获取套接字选项值
    参数：level　选项级别　　　　SOL_SOCKET
        　option 每个选项类别对应的子选项 
    返回值：选项的值

udp应用之广播
    广播：一点发送，多点接受
    广播地址：每个网段最大的地址为广播地址
    设置套接字可以发送接受广播
    s.setsockopt(SOL_SOCKET,SO_BROADCAST,1)

tcp 套接字应用之HTTP传输
http协议　（超文本传输协议）　应用层协议
    用途：获取网页
        数据的传输
    特点：
        １、应用层协议，传输层使用tcp传输
        ２、简单、灵活，很多语言都有http专门的接口
        ３、无状态的协议，不记录用户的请求内容
        ４、请求方法多样，支持数据全面
网页请求流程
    １、客户端（浏览器）通过tcp传输发送http请求给服务端
    ２、服务端（http服务器）接受到http请求进行解析
    ３、服务端处理具体的请求内容组织数据（网站后端）
    ４、服务端将数据以http响应的格式发送给客户端
    ５、客户端接收到服务器响应数据，进行解析展示
http请求（request）
    请求格式：
        请求行：具体的请求类别和请求路径
            格式：GET 　　/  　　　　　　HTTP/1.1
                类别　　内容　　　　　　　协议版本（1.1）
                类别：每种类别代表要做不同的事情
                    GET　　　　获取网络资源（在浏览器输入网址发起请求就是ｇｅｔ）
                    POST　　　提交一定信息，得到反馈（类似于注册、登陆等）
                    HEAD　　　只获取响应头（描述响应内容）
                    PUT　　　　更新服务器资源
                    DELETE　　删除服务器资源
                    CONNECT　　
                    TRACE　　　测试
                    OPTIONS　　获取服务器信息

        请求头：对请求内容的基本描述
            格式：
                Accept-Encoding: gzip, deflate, br
                Accept-Language: zh-CN,zh;q=0.9
                Cache-Control: max-age=0
                Connection: keep-alive
        空行

        请求体：请求参数或提交内容
作业：
    １、熟练tcp和udp服务端代码
    ２、使用tcp完成一个文件的传输，要求可以传输文本、图片
    　　从客户端传输到服务端或从服务端传输到客户端