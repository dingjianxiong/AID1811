http响应（response)
    响应格式
        响应行：反馈基本的响应情况
            格式：http/1.1    200   　　　ok
                　协议版本　　　响应码　　　附加信息
                响应码：代表不同的响应情况
                        1xx：提示信息：表示请求被接受
                        2xx：响应成功
                        3xx：响应需要进一步操作，重定向
                        4xx：客户端请求错误
                        5xx：服务器未知异常
        响应头：对响应信息的基本描述
        空行
        响应体：要给客户端回发的内容
要求：１、什么是http协议，是哪一层，用tcp传输还是udp
        ２、http协议场景应用场景
        ３、网页获取的流程
        ４、http协议请求和响应的格式，及每部分功能
        ５、场景的请求类型和响应码含义
IO类型
在内存中存在数据交互的操作都认为是IO操作

和终端交互：input
和磁盘交互：read write pymysql
和网络交互：recv send

计算机密集型程序（cpu密集）：程序中计算较多，IO操作较少，cpu消耗大，允许速度快
IO密集型程序：在程序执行中存在大量IO操作，而cpu运算较少，cpu消耗很低，耗时较长

IO分类
    阻塞IO  非阻塞IO    IO多路复用      异步IO
    阻塞IO：是IO的默认形态，是效率较低的一种IO
        阻塞情况：
            *因为某种函数没有达成造成的阻塞
            accept recv recvfrom input
            *因为处理IO时间较长形成的阻塞行为
            网络延迟　大文件读写
    非阻塞IO
        将原本阻塞的IO函数通过设置属性使其变为非阻塞

        sockfd.setblocking(bool)
        功能：将套接字设置为非阻塞IO
        参数：默认为True表示阻塞状态
            设置为False，则表示为非阻塞状态则用sockfd调用函数时步阻塞
        
        *超时检测：即设置一个最长的等待时间，超时则不在阻塞等待
        sockfd.settimeout(sec)
        功能：设置套接字的超时检测时间
        参数：时间　秒
            abc([timeout])
        * 在阻塞状态下设置超时检测（不可以于非阻塞函数同时使用）

    IO多路复用
        定义：同时监控多个IO事件，当哪个IO事件准备就绪，就执行哪个IO事件,
            以此形成同时操作多个IO事件，避免一个IO阻塞造成其他IO都不可以执行的形态
            提高IO运行效率
        就绪IO：表示一种临界状态，即该IO已经发生，由内核交由应用程序处理
        具体方案：
            １、系统支持
                select:window  Linux unix
                poll: Linux unix
                epoll: Linux
            ２、python实现
                import select（模块）

        select方法
            rs,ws,xs=select(rlist,wlist,xlist[,timeout])
            功能：监控IO事件，阻塞等待IO事件发生
            参数：
                rlist：列表（想要监控的读IO事件）想要关注的等待发生的IO事件
                wlist：列表（想要监控的写IO事件）想要关注的可以主动处理的IO
                xlist：列表　　　　　　　　　　　想要关注的出现异常去处理的IO
                timeout：超时时间
            返回值：
                rs  列表    rlist中准备就绪的事件
                ws  列表    wlist中准备就绪的事件
                xs  列表    xlist中准备就绪的事件
    基于select IO多路复用的tcp服务端
        步骤：
            １、将关注的IO放入对应类别的列表
            ２、通过select函数进行IO监控
            ３、当IO事件发生时　遍历select返回值列表
            ４、处理发生的IO事件
        注意：wlist中如果有IO事件则会立即返回到返回值中
            在IO处理中不宜出现死循环等长期占有服务端的情况
            IO多路复用占用计算机资源较少，效率较高
位运算
＆　按位与（判断）
｜　按位或（添加）
^  按位异或
<< 左移 
>>右移
11   1011
14   1110
11 & 14  1010  10   一０则０
11 | 14  1111  15   一１则１
11 ^14   0101   5   相同为０不同为１
11<<2    101100 44  向左移动右侧补０（原来的数*2)
14>>2  　　11  　3  向右移动去掉低位 (原来的数／２)

作业：
    １、熟练select 服务端程序
    ２、熟练http pserver
    ３、复习　类（继承，super,__init__)
    ４、编写一个select服务，监听客户端的连接，客户端发送的内容，
        以及终端输入的内容将客户端发送的内容和终端输入的内容
        全部备份到一个文件里
        sys.stdin 标准输入流
        sys.stdin.read()
    