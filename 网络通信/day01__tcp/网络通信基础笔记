ISO：国际标准化组织
OSI 网络通信模型（七层模型）
1、应用层：
    提供应用服务，具体的功能由具体程序体现
2、表示层(Presentation)：
    数据的压缩、优化、加密
3、会话层(session)：
    建立应用级的连接，选择合适的传输服务
4、传输层(Transportation)：
    负责进程到进程间的通信，保证可靠性传输、差错校验、流量控制
5、网络层(Network)：
    负责主机到主机之间的通信路由选择（寻址）、分段、网络互连
6、数据链路层(Data Link)：
    负责相邻主机间的通信，进行数据交换、控制消息收发、链路的连接
7、物理层(Physical)：
    定义机械、电器、物理标准、硬件特性、物理接口标准、传输介质

TCP/IP四层模型
   应用层（应用层、表示层、会话层）
   传输层
   网络层
   物理链路层（物理层、数据链路层）

七层模型的特点：
   1. 建立了统一的网络工作流程
   2. 每个层次功能清晰，各司其职
   3. 方便了网络产品开发，推动了网络发展
   4. 没有实现
   5、降低了通信模块开发过程中的耦合度

cookie（小知识）
高内聚：模块的功能尽可能单一，不要相互掺杂
低耦合：模块之间的关联影响尽可能少

网络协议
    一组规则，规定了数据组织、编码、发送、
    传输、解析的标准
    由权威的机构制定或通信双方约定
    通信的参与方都必须遵守
    
网络编程概念
网络主机：在网络当中标识一台目标计算机  host
    本地使用（表示本机的ip地址）：'localhost'
            '127.0.0.1'
    网络使用（ifconfig命令查看）：'176.221.15.207'
    既可以本地使用也开通网络使用：'0.0.0.0'
IP地址：网络上一台主机的网络路由位置
ipv4（32位）：点分十进制  192.168.1.2   每一部分 0-255
ipv6（128位）：abcd:ac12:ab23:ab45:ab56:ab62:ad18:sb78(如果中间为空则表示为：ff34::qw21)

查看本地IP地址
    linux   IP地址： ifconfig（命令查看）
    windows IP地址： ipconfig（命令查看）
网络连接测试：ping ip地址
    如：
        ping www.baidu.com
特殊ip： 127.0.0.1     本机测试ip
        0.0.0.0       自动选择合适的本机网卡ip
        192.168.5.0   表达一个局域网段（注：最后的0 表示局域网）
        192.168.5.1   通常表示网关地址（注：最后的1 通常表示网关地址）
        192.168.5.255 广播地址（注：最后的255 通常表示广播地址）
域名：网络服务器地址的别名，有一定含义，方便记忆

端口号（port）:是网络地址的一部分，用于区分一台终端上的不同应用
    * 在一个系统中端口号不能重复使用
        取值范围：1 - 65535   
        1-255      一些众所周知的公共程序端口
        256-1023   系统应用端口
        1024-65535 自用端口
socket模块获取网络信息
import socket
获取计算机名：
    socket.gethostname()
通过计算机名获取主机地址
    socket.gethostbyname('localhost')
获取应用程序端口：
    socket.getservbyname('mysql')
通过端口获取应用程序名称：
    socket.getservbyport(3306)
将IP地址转换为16进制：
    socket.inet_aton('192.168.1.2')
将16进制bytes地址转换为IP地址：
    socket.inet_ntoa(b'\xc0\xa8\x01\x02')

传输层服务：
面向连接的传输服务（TCP协议）
    传输特征：提供可靠的数据传输，可靠性值数据传输过程中无丢失、无失序、无差错、无重复
    实现手段：在通信过程中需要发送端和接收端建立可靠的连接，通信结束后要正常断开连接
    连接过程（三次握手）
        1、客户端向服务端发送标志位变量请求连接
        2、服务端收到请求后，回复消息允许建立连接
        3、客户端收到回复，发送最终标志连接建立成功
    断开连接过程（四次挥手）
        1、主动方向被动方发起断开请求
        2、被动方收到请求后回复消息准备断开连接
        3、被动放准备就绪，再次发送标志位表示可以断开
        4、主动方发送最终断开标示
    适用情况：对数据准确性有明确要求，数据传输文件比较大，需要确保可靠传输
        如： 文件下载、网页获取、邮件收发

面向无连接的传输服务（基于UDP协议）
    传输特征：提供不可靠的传输服务，不保证传输过程的数据完整性
    适用情况：网络较差，对传输可靠性要求不高，或者传输不能够建立连接
    如： 视频、群聊、广播

要求：OSI七层模型介绍一下，TCP/IP模型是什么
     tcp服务和udp服务有什么区别
     三次握手和四次挥手是什么，过程能描述一下吗


网络编程
    * 程序运行原理
    * 套接字编程：实现网络编程，进行数据传输的技术手段
socket模块实现套接字编程
    套接字分类：
        * 流式套接字（tcp协议）SOCK_STREAM
            流式套接字--tcp协议--面向连接的传输--可靠
        * 数据报套接字（udp协议）SOCK_DGRAM   
            数据报套接字--udp协议--面向无连接的传输--不可靠

tcp套接字编程

服务端
from socket import * 
    1、创建套接字
        sockfd=socket(socket_family=AF_INET,
                    socket_type=SOCK_STREAM,
                    proto=0)
        功能：创建套接字对象
        参数：socket_famliy 地址(族)类型  AF_INET --> IPV4
             socket_type  套接字类型 SOCK_STREAM --> 流式套接字
                                    SOCK_DGRAM -->数据报套接字
            proto  通常为0
        返回值：套接字对象
    2、绑定地址
        sockfd.bind(addr)
        功能：绑定服务器地址
        参数：addr  以元组形式给出服务器地址
        如：
            sockfd.bind(('192.168.1.2',8888))
    3、设置监听套接字
        sockfd.listen(n)
        功能：设置监听套接字，建立监听队列
        参数：监听队列大小
    4、等待客户端连接
        connfd,addr=sockfd.accept()
        功能： 阻塞等待处理客户端连接
        返回值：connfd 客户端连接套接字
               addr 客户端地址
        * 阻塞函数：程序运行过程中遇到阻塞函数会暂停执行
                直到达成某种条件再继续执行
    5、消息收发
        data=connfd.recv(buffersize)
        功能：阻塞 等待接受客户端消息
        参数：整数，一次最多接受多少字节消息
        返回值：接收到的内容
        str --> bytes     encode()
        bytes-->str       decode()

        n=connfd.send(data)
        功能：发送数据
        参数：要发送的内容 bytes格式
        返回值：实际发送数据的大小（字节）
    ６、关闭套接字
    　　sockfd.close()
        功能：关闭套接字
socket()-->bind()-->listen()--accept()--recv()/send()--close()
1、创建套接字  -->  2、绑定地址 -->  3、设置监听套接字 
4、等待客户端连接 -->5、消息收发 -->６、关闭套接字
客户端
    １、创建套接字
    　　　socket()
        * 要求数据传输两端套接字类型必须相同
    ２、发起连接
    　　sockfd.connect(addr)
        功能：发起连接请求
        参数：元组，服务端地址
    ３、消息的收发
    　　recv()/send()
        * 服务端和客户端的收发搭配
　　４、关闭套接字
　　　　sockfd.close()

socket() -->connect() -->recv()/send() -->sockfd.close()
连接其他电脑：
　　　服务端ip地址(server)：0.0.0.0
     他人电脑ip地址(client):填写他人的ip地址(用ifconfig命令查看)

作业：
　　１、对要的问题，自己能够口述回答
　　２、熟练掌握所学函数
　　３、将示例改为可以从客户端不断发送接受
　　４、复习　文件操作
　　　　