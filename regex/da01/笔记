正则表达式（RE）
    动机：
        １、文本处理已经成为计算机常见的工作之一
        ２、对文本内容的搜索、定位、提取是逻辑比较复杂的工作
        ３、为了快速方便的解决上述问题，产生了正则表达式技术
    定义：即文本的高级匹配模式，提供搜索，替换等功能；其本质是一个由一系列字符和特殊符号构成的字符串，
        这个字符串即正则表达式
目标：
    １、熟练掌握正则表达式符号
    ２、什么是正则表达式，如何应用
    ３、能够读懂正则表达式，编写简单的正则匹配
    ４、会使用re模块操作正则表达式
正则表达式特点：
    １、方便文本处理
    ２、支持语言众多
    ３、使用灵活，变化多样

python--->re模块

re.findall(pattern,string)
    功能：获取所有正则表达式匹配的内容
    参数：
        pttern　正则表达式
        string 目标字符串
    返回：列表　　得到所有符合条件的内容

元字符的使用
    １、普通字符
        元字符：a b c 张
        匹配规则：每个字符匹配对应的字符
        例如：
            re.findall('hello','hello word')
            结果：['hello']
    ２、或
        元字符：｜
        匹配规则：匹配　｜　两侧任意一个正则表达式规则
        例如：
            re.findall('hello|python',s)
            结果：['hello', 'python']
        *注意|两边不能有空格;如果匹配的两个字符有一中，有相同的字符会只找出一个例如：ab|bc,结果[ab]
    ３、匹配单个字符
        元字符： .
        匹配规则：匹配出\n外任意一个字符
    ４、匹配字符串开始位置
        元字符：　^
        匹配规则：匹配目标字符串的开头位置(只匹配开头位置，其他位置出现相同的不会匹配)
    ５、匹配字符串的结尾位置
        元字符：　$
        匹配规则：匹配字符串结尾位置
            例如：
                re.findall('hello$',s)
                结果：['hello']
    ６、匹配重复
        元字符：　*
        匹配规则：匹配前面的字符出现0次或多次（默认多个）
            例如：
                re.findall('ho*','hoooooadsa')
                结果：['hooooo']
            *注意：ho*匹配h为o出现0次,而ho表示出现１次
    ７、匹配重复
        元字符：+
        匹配规则：匹配前面的字符出现１次或多次（默认多个）
    ８、匹配重复
        元字符：？
        匹配前面出现的字符０次或一次
            例如：
                a=re.findall('ab?',"sadsaewgreabeer")
                结果：['a', 'a', 'ab']
    ９、匹配重复
        元字符：{n}
        匹配规则：匹配前面的字符出现自定字数
            例如：a=re.findall('b{2}',"abbbaawbb")
            结果：['bb', 'bb']
    １０、匹配重复
        元字符:{m,n}
        匹配规则：匹配前面出现的字符m-n次（默认多个）
            例如：re.findall('ab{2,4}',"aba abbbww sabbbbbb")
            结果：['abbb', 'abbbb']
    １１、匹配字符集
        元字符：[字符集]
            例如：[abc123]-->字符集中字符
                [a-z][A-Z][0-9]:取字符区间内所有值
                [_#%123a-z]:可以混合使用（一般把单个字符写前面，区间取值放最后面）
        匹配规则：匹配字符集中任意一个字符
            例如：re.findall('s[dw]',"abs sdw sww 123 海　你好")
            结果：['sd', 'sw']
    １２、匹配字符集
        元字符：[^...]
        匹配规则：匹配除了字符集中任意一个字符
            例如：re.findall('[^A-Z]+[a-z]',"Aasd fe GG YTRTFe123 海　你好")
            结果：['asd fe']
            例子２：a=re.findall('[^, ]+',"Aasd fe GG YTRTFe123 海 你好")
                #*除了逗号和空格外，多个字符
            结果：['Aasd', 'fe', 'GG', 'YTRTFe123', '海', '你好']
    １３、匹配任意（非）数字字符
        元字符：\d  \D
        匹配规则：\d　匹配任意数字字符　[0-9]
                \D  匹配任意非数字字符[^0-9]
                例如：a=re.findall('1\d{10}',"1232136764,341243,12132131234 1356547673")
                结果：['12132131234']
                *寻找以１开头的１０位数字组成的
    １４、匹配任意普通字符
        元字符：\w \W 
        匹配规则：\w 匹配任意普通字符[_a-zA-Z0-9]
                \W 匹配任意非普通字符
            *普通字符：指数字、字母、下划线、普通utf8字符
            例如：re.findall('[\W+]',"seew#1312 44% 下降")
            结果：['#', ' ', '%', ' ']
    １５、匹配任意（非）空字符
        元字符：\s \S 
        匹配规则：　\s匹配任意空字符[ \r\n\t\v\f]
                  \S匹配任意非空字符
            例如：re.findall('\S+',"hello    word ")
            结果：['hello', 'word']
    １６、匹配字符串开头位置
        元字符：\A \Z
        匹配规则：\A匹配字符串开头
                \Z匹配字符串结尾
                例如：re.findall('\A\d+-\d+\Z',"1000-1500")
                结果：['1000-1500']（完全匹配）
    １７、匹配（非）单词边界
        元字符:\b \B 
        匹配规则：\b 匹配单词边界位置
                \B 匹配非单词边界位置
        *注意：数字字母下划线，普通utf8字符和其他字符的交界位置为单词边界
            例如：re.findall(r'\bis\b',"this is a test")
            结果：['is']
元字符总结：
    匹配单个字符：. [...] [^...] \d \D \w \W \s \S
    匹配重复：* + ? {n} {m,n}
    匹配位置：^ $ \A \Z \b \B 
    其他：| () \

正则表达式转义
    在正则表达式中如果想表达特殊符号本身则要用转义字符，即在特殊符号前加\表达其本身字符
        例如：正则表达式'Mr\.Right'  让 . 没有元字符含义
    特殊符合：. * + ? ^ $ [] () | \

    目标字符串        正则表达式        python字符串
    "$10"            '\$\d+'          "\\$\\d+"
    例如：re.findall('\\d+','123456')
        结果：[１２３４５６]
    raw字符串-->原始字符串
    特点：字符串内容为原样表达，不进行转义解析
    例如： r"\$\d+  =  "\\$\\d+
    例如：re.findall(r"\bis\b",'this is test')
        结果：is(第一个is)

贪婪　和　非贪婪
贪婪模式：正则表达式中的重复匹配默认总是尽可能的向匹配更多的内容
    涉及元字符：* + ? {m,n}
非贪婪（懒惰）模式：尽可能少的重复匹配内容
    贪婪-->非贪婪：*?  +?   ??   {m,n}?
    例如：re.findall(r"ab{3,5}?",'abbbbbbb')
    结果：[abbb]
    例如：re.findall(r'a.*?b','acb,alb,adeb')
    结果：['acb','alb','adeb']
正则表达式分组：
    使用()可以为正则表达式内部建立若干分组，子组为正则表达式的一部分
    子组的特点：
        １、一个正则表达式内部可以有多个分组
        ２、分组后正则表达式仍然是一个整体去匹配目标字符串，不会使用分组单独匹配
        ３、分组一般由外到内，由左到右计数，不会重叠
    子组的作用：
        １、可以将分组作为一个整体，改变元字符的操作对象。
            例如：re.search(r'(ab)+\d','abababababab1234').group()
                结果：['abababababab1']
            例子２：re.search(r'\w+@\w+\.(cn|com)','abc@123.com').group()
                结果：abc@123.com
        ２、可以通过函数单独提取子组的对应匹配内容
            例如：re.search(r'(http|https|ftp|file)://\S+','http://www.baidu.com').group(1)
            结果：http
        ３、可以通过命名注释子组含义，让结构分明
            *子组分为捕获组和非捕获组，捕获组即定义了名称的子组
            格式：(?P<name>patter)
            例如：re.search(r'(?P<piglet>ab)cde','abcdefght').group("piglet")
            结果：ab
正则表达式设计原则：
    １、正确性，能够正确的匹配目标字符串
    ２、排他性，除了要匹配的内容，尽可能不匹配到其他内容
    ３、全面性,尽可能对目标字符串各种情况考虑全面不遗漏

re模块使用
    regex=compile(patten,flags=0)
    功能：生成正则表达式对象
    参数：pattern正则表达式
        flags功能标志位，丰富正则表达式的匹配功能
    返回值：返回正则对象

    re.findall(pattern,string,flags)
    功能：从目标字符串匹配所有正则内容
    参数：pattern正则
        string目标字符串
        flags 功能标志
    返回值：返回匹配到的内容列表
        如果正则表达式有子组则值获取子组对应内容

    regex.findall(string,pos,endpos)
    功能：从目标字符串匹配所有正则内容
    参数：string 目标字符串
        pos （整数）对目标字符串截取的起始位置，默认开头
        endpos　（整数）对目标字符串截取的结束位置，默认结尾
    返回值：返回匹配到的内容列表
        如果正则表达式有子组则值获取子组对应内容
    例如：regex=re.compile(pattern)
        l=regex.findall(s,pos=0,endpos=10)
        结果：[('张', '1994'), ('李', '1')]
        *截取目标字符的第０个字符到１０个字符

    re.split(pattern,string,flags)
    功能：使用正则表达式切割内容
    参数：pattern正则
        string目标字符串
    返回：列表　切割后的内容
    例如：l=re.split(r'\s+','hello   　world  　nihao    kitty')
    结果：['hello', 'world', 'nihao', 'kitty']

    re.sub(pattern,replaceStr,string,max,flags)
    功能：使用字符串替换正则匹配内容
    参数：pattern　正则
        replaceStr　替换的字符串
        string 目标字符串
        max  最多替换几处，默认全部替换
    返回值：返回替换后的字符串
    例如：l=re.sub(r'\s+','##','hello   world  nihao    kitty',2)
    结果：[hello##world##nihao    kitty]

    subn():与sub相同，多返回一个替换个数
    例如：l=re.subn(r'\s+','##','hello   world  nihao    kitty',2)
    结果：('hello##world##nihao    kitty', 2)

    re.finditer(pattern,string,flags)
    功能：查找正则表达式匹配内容
    参数：pattern正则
        string目标字符串
        flags
    返回：返回迭代对象（match对象）

    re.fullmatch(pattern,string,flags)
    功能：匹配目标字符串
    参数：pattren正则
        string目标字符串
        flags
    返回：返回匹配到的内容，失败返回None
    例如：re.fullmatch(r'\w+','hello1973')
        结果：hello1973

    re.match(pattern,string,flags)
    功能：匹配目标字符串开始位置
    参数：pattren正则
        string目标字符串
        flags
    返回：返回匹配到的内容，失败返回None

    re.search(pattern,string,flags)
    功能：匹配目标字符第一处匹配内容
    参数：pattren正则
        string目标字符串
        flags
    返回：返回匹配到的内容，失败返回None


作业：
    １、熟记正则表达式元字符
    ２、使用regex对象，复习re模块
    ３、自己找一篇文档，使用正则表达式匹配
        １、所有以大写字母开头的单词
        ２、所有的数字，包含整数、小数、负数、分数、百分数

regex 对象属性
    regex=re.compile()
    pattern:获取对应的正则表达式
    flags:获取标志位
    groupindex：获取捕获组组名和组序号的字典
    groups：获取有多少个子组

match对象属性和方法
    pos：目标字符串的开始位置
    endpos：目标字符串的结束位置
    re：返回正则表达式
    string：目标字符串
    lastgroup：最后一组名称
    lastindex：最后一组是第几组
    属性方法
    span()：匹配内容的起止位置
    start()：匹配内容的开始位置
    end()：匹配内容的结束位置

    group()
    功能：获取match对象的对应内容
    参数：默认为０表示获取正则表达式整体匹配到的内容
        如果为序列号或者子组名称则表示获取对应子组的匹配内容
    返回值：返回相应的内容
    groupdict()：获取捕获组字典
    groups()：获取获取所有子组对应内容

flags参数使用（re调用）:
    *re调用函数最后一个参数通常为flags，用以丰富正则的匹配功能
    I==IGNORECASE   表示匹配时忽略大小写
    A==ASCII        只能匹配ascii
    S==DOTALL       作用域元字符 .　使其可以匹配\n
    M==MULTILINE    作用域^$使其可以匹配每行的开头结尾
    X==VERBOSE      可以给正则表达式每行加#注释

    同时使用多个flag
    flags=re.I | re.X


