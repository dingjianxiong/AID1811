--锁 ：对数据库的控制权，目的是解决客户端并发访问的冲突问题
--   目的：解决多个工作单元并发操作数据的正确性
--   1、锁类型分类
--     1、读锁(共享锁)
--       select：加读锁后别人不能更改表记录,但可查询
--     2、写锁(互斥锁、排他锁)
--       update：加写锁后别人不能查询,不能改
--   2、锁粒度
--     1、行级锁（细粒度） ：Innodb
--       可以加读锁、写锁
--       只锁定一行，并发效率高，控制较为复杂，消耗资源多
--     2、表级锁（粗粒度） ：MyISAM
--       可以加读锁、写锁
--        锁定整张表，并发效率低，控制简单，消耗资源较少
-- 存储引擎(处理表的处理)
--    什么是存储引擎：表的存储方式，包括：存储机制、索引机制、锁定方式
--  1、基本操作：
--     1、查看所有的存储引擎
--        show engines;
--     2、查看已有表的存储引擎
--        show create table 表名;
--     3、创建表时指定存储引擎
--       create table 表名(...)engine=MyISAM
--     4、修改表的存储引擎：
--        alter table 表名 engine=InnoDB;       
--  2、InnoDB特点
--     1、支持行级锁、外键
--     2、支持数据库事务、事务回滚
--     3、共享表空间
--       查看mysql表存储的文件目录：show global variables like '%datadir%';
--       表名.frm ：表结构和索引信息
--       表名.ibd ：表记录（表数据）
--       适用场合：
--           更新密集操作的表，并发效率高
--           要求支持数据库事物
--           要求支持外键约束
--           要求致辞auto_increment字段
--  3、MyISAM特点
--     1、支持表级锁、访问速度快，不支持事物、不支持外键、不支持行锁定
--     2、独享表空间
--       表名.frm ：表结构
--       表名.myd ：表记录
--       表名.myi ：索引文
--     3、适用场景
--          查询比较多
--          数据一致性要求较低（不支持事物）
--          没有外键的约束
--   4、MEMORY（内存表）
--     特点：
--       1、表结构在硬盘中,表记录在内存中
--       2、服务重启或主机重启后,表记录消失
--       3、访问速度快、占内存
--       4、文件：表名.from 存储表结构
--       5、服务（或机器）重启后，表中的数据丢失
--     适用场景：
--         数据量较小、访问速度要求极快、访问频率高、数据丢失后不会造成影响
--   5、如何决定使用哪个存储引擎
--     1、执行查询操作多的表 ：MyISAM(使用InnoDB浪费资源)
--     2、执行写操作多的表   ：InnoDB
--  E-R模型：实体关系模型
--      1、实体：现实生活可以区分的事物称为实体
--      2、关系：实体之间的联系
--           一对一 
--           一对多
--      3、属性：实体所具有的数据特征
--      4、E-R图：用图形化方式，表达实体间的关系
--         矩形：表示实体
--         椭圆：实体的属性
--         菱形：实体间的关系
--             一对一：菱形左右两侧各写一个1
--             一对多：菱形左右分别用1，N来表示
--             多对多：菱形左右分别用M，N表示

-- 使用Python访问mysql
--     pymysql库：Python语言访问mysql接口
--   1、与Python交互
--      python3 ：pymysql(模块名)
--      python2 ：MySQLdb(模块名)
--   2、安装
--     1、在线 ：sudo pip3 install pymysql
--               sudo pip install mysql-python
--     2、离线 ：
--      第一步：下载安装包，下载地址：https://pypi.org/project/pymysql/
--            pymysql-0.9.3.tar.gz
--      第二步：解压包，并执行安装
--            tar -xf pymysql-0.9.3.tar.gz
--            cd pymysql0.9.3 目录
--            sudo python3 setup.py install
--      验证：进入Python交互模式，执行导入包操作
--          import pymysql 
--             如果不报错，安装成功
--   3、pymysql使用流程
--         导入模块：import pymysql 
--     1、数据库连接对象 ：db = pymysql.connect(...)
--     2、游标对象 ：cur = db.cursor()
--     3、执行命令 ：cur.execute('SQL命令')
--     4、提交事物（如果需要增删改）     ：db.commit()
--     5、关闭游标 ：cur.close()
--     6、断开连接 ：db.close()
--   4、pymysql.connect()参数
--     1、host ：主机地址  host="localhost"
--     2、user ：用户名    user="root"
--     3、password ：密码  password="123456"
--     4、database ：库名  database="db5"
--     5、charset  ：字符集charset="utf8"
--     6、port     ：端口  port=3306
--   5、数据库连接对象(db)方法
--     1、db.cursor() ：创建游标对象
--     2、db.commit() ：提交到数据库执行
--     3、db.rollback()：回滚
--     4、db.close()  ：断开与数据库连接
--   6、游标对象(cur)的方法
--     1、cur.execute('SQL命令') : 执行sql命令
--        cur.execute(sql命令,[]) : 
--          sql命令中所有占位都用 %s ,不用 % 补位
-- 	 第二个参数一定要为列表
--     2、cur.close()     : 关闭游标对象
--     3、cur.fetchone()  : 取1条,元组()
--     4、cur.fetchmany(n): 取n条,大元组套小元组((),)
--     5、cur.fetchall()  : 取所有查询结果,大元组套小元组((),(),(),(),)
--    属性：
--    rowcount         返回修改影响的行数

-- sql 语句优化
--    1、在经常查询、排序的字段上建立索引
--    2、尽量少使用不等于条件判断，不等于会放弃使用索引
--    3、少使用null值判断，null值判断会放弃使用索引
--    4、条件判断少使用or连接运算，in、not in
--    5、模糊查询避免  %  前置
--    6、查询时如果是select *,直接写成字段名会提高效率
--    7、尽量少在where子句中，使用字段进行运算；
--      例如：
--          select * from acct where balance/2>5000
--    8、数值类型的字段，进行条件比较时，一般比字符串比较效率更高

-- 账户管理系统启动时，增加登录功能
-- 
