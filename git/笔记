GIT 代码协同管理工具

代码管理工具作用：
    １、防止代码丢失，做代码备份
    ２、代码的版本控制，可以设置多个节点，在多个版本间切换
    ３、可以方便团队开发，更好的做代码管理
    ４、可以方便产品迭代

什么是git？
    Git是一个免费的开源分布式版本控制系统，可用于快速高效的管理大小项目。

分布式和集中式
    分布式：每个节点都保存完整代码，没有明确的中央服务器，节点之间相互推送共享代码
    集中式：代码由中央服务端集中管理，为每个节点分配权限，每个节点统一上传的到中央服务器，或从服务器下载
git 特点
    *git可以管理各种文件，特别是代码项目，多在*nix系统使用
    *git是分布式，不同于svn的集中式，这是git和svn的最大差别
    *git是开源系统，可以脱网使用，数据传输速度快
    *git更好的支持分支协作，分布式代码更安全
git安装
    sudo apt-get instll git

git配置命令
    git config
    配置级别
        １、系统中所有用户都可以使用该配置
            命令：git config --system
            配置文件：/etc/gitconfig
        ２、当前用户可使用该配置
            命令：git config --global
            配置文件：~/.gitconfig
        ３、当前项目可使用该配置，必须在项目目录下执行
            命令：git config
            配置文件：project/.git/config
配置内容：
    １、配置用户名
        配置用户名为tedu
            git config --global user.name tedu
        在当前目录下查看配置的用户名：
            cat ~/.gitconfig
    ２、配置邮箱
        配置邮箱
            sudo git config --system user.email djx@tedu.cn
        查看邮箱名
            cat /etc/gitconfig
    ３、配置编译器
        命令：git config core.editor vacode
    ４、查看项目配置
        命令：git config --list
git 的基本命令
    １、初始化仓库
        git init
            *在某个目录下初始化仓库后自动产生.git目录，该目录下的所有文件都可以使用git管理

            工作区：用于用户对项目文档的各种直接操作，即项目目录操作
            暂存区：用于记录用户对工作区的各种修改，以便同步到本地仓库中
            git仓库：用于存储备份工作区的内容，方便git进行管理
    ２、查看分支状态
        git status
        分支：在git仓库中一个独立的工作环境，不影响其他分支操作。git仓库初始工作分支为master。
    ３、文件提交到暂存区
        git add [文件]
            git add *:把所有文件提交到暂存区
        *可以一次提交多个文件或者单个文件，或者*表示所有文件。（隐藏文件必须指明，不能用*）
        *提交内容可以是普通文件也可以是目录
        *暂存区只是做工作区的提交修改记录，并不是将文件备份存储
        git rm --cached [文件／目录]
    ４、将文件同步到本地git仓库
        git commit -m 'some message'
            *同步要添加说明，只能同步已提交到暂存区的内容
        git checkout --[文件]
            *将文件恢复到工作区
    ５、查看commit日志
        git log

        查看日志id
            git log --pretty=oneline
    ６、查看本地文件和仓库文件差异
        git diff [file]
    ７、从仓库恢复文件到工作区
        git checkout [文件]
    ８、文件的移动和删除
        git mv [移动的文件] 移动到什么位置／（可以修改文件名）
        git rm [文件]
        *与add 操作相同，即将文件移动或删除提交到暂存区
作业：
    １、总结正则表达式的使用
    ２、申请github账户
    ３、httpserver第二版复习


版本控制命令
    １、回到之前的commit id位置
        git reset --hard HEAD^
        *HEAD后有几个^，就表示退回几个commit位置
        *HEAD:表示最新的commit_id
        *commit_id:表示记录操作的id

        git reset --hard　commit_id（*前七位）
        *commit_id用前七位即可
        *选定commit_id表示HEAD指向选定的id，而不是恢复到指定的commit_id版本
        *会丢弃commit_id后面的id
    ２、去往之前较新的版本
        git reflog(查看历史版本记录)
        *查看后使用git reset --hard即可选择回到某个操作之后的状态
标签管理
    什么是标签：即在某个commit_id位置添加快照，保存工作状态，一般用于版本的迭代，和重要的项目节点记录
    １、创建新的标签
        git tag v1.0
        *默认在最新的commit_id处添加标签

        git tag v1.0 [commit_id]
        *指定某一个commit_id版本

        git tag v1.0 -m "message"
        *为标签添加信息
    ２、查看标签
        git tag
        *查看所有的标签

        git show v1.2
        *查看具体标签的信息
    ３、去往某个标签版本
        git reset --hard v1.0
    ４、删除标签
        git tag -d v1.1
临时工作区操作
    １、创建工作区：
        git stash
        *对工作区文件的修改进行临时保存    
    ２、查看已经保存的工作区记录
        git stash list
        *最新的保存为{0}以此类推
    ３、选择应用某个工作区
        git stash apply stash@{0}
        *执行命令时，工作区必须为“干净”状态
    ４、删除保存的工作区
        git stash drop stash@{0} 删除一个
        git stash pop　删除最新保存的工作区将其删除
        git stash clear　删除所有工作区

分支操作
    什么是分支？
        分支即每个人获取原有代码，再此基础上创建自己的工作环境，单独开发，不会影响其他分支工作。
        开发完成后统一合并
    １、查看当前分支
        git branch　
        列出所有项目分支，*的表示当前工作分支
        
    ２、分支创建和切换
        git branch [name]
        *创建新的分支时，确保当前分支是干净的

        git checkout -b [tom_dev]
        *创建并切换到分支

        git checkout [djx] 
        *切换到分支
    ３、合并分支
        git merge [branch_name]
        *在master分支执行该命令，即将其他分支内容合并到master
        *当合并分支产生冲突时，需要手动更改提交
    ４、删除分支
        git branch -d [branch_name]
        *如果分支没有合并，需要用-D强制删除
帮组文档
    git help [命令名称]

远程仓库
    远程仓库：即远程主机上的git仓库，实际git为分布式结构，每台主机git仓库都相似，只是把其他主机
        中的git仓库称为远程仓库
    １、创建共享远程仓库
        [1]、场景仓库目录，设置目录属主
            mkdir gitrepo
            chown tarena:tarena gitrepo
        [2]、将仓库目录使用--bare初始化，给仓库起名称
            cd gitrepo
            git init --bare spyder.git
        [3]、设置spyder.git目录属主与项目目录相同
            chown -R tarena:tarena spyder.git
    ２、远程仓库连接协议
        *　本地协议：直接通过路径连接一个项目仓库
            例如：/opt/git/project.git
                或者file:///opt/git/project.git

        *　SSH协议:通过ssh协议方式连接远程
            例如：ssh://user@server/project.git
                或者user@server:/project.git
        *　git协议

        *　HTTP/HTTPS协议:
            例如：http://example.com/project.git

    ３、添加远程主机仓库：ssh协议
        git remote add origin tarena@127.0.0.1:/home/tarena/gitrepo/spyder.git
            origin：远程主机的名字，可修改
                *删除远程主机：git remote rm [远程主机名]
            tarena@127.0.0.1：表示远程主机名称@地址
            /home/tarena/gitrepo/spyder.git：远程仓库目录／名称
        *该命令必须在某个git项目目录下运行
    
    ４、push将本地分支推送到远程
        git push -u origin master
            *-u表示本地master和远程master建立追踪关系，这样后面本地分支修改后再向远程推送
                可以省略分支名　例如：git push
            例如：向远程推送标签
                git push origin v1.0　某一个标签
                git push origin --tags　所有标签
        删除某一个远程分支
        git push origin --delete tom_dev
    ５、clone远程仓库项目
        获取项目到本地
        git clone tarena@127.0.0.1:/home/tarena/gitrepo/spyder.git